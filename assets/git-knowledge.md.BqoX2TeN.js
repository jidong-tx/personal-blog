import{_ as o,c as a,o as t,ae as c}from"./chunks/framework.aUVN3Dp1.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"git-knowledge.md","filePath":"git-knowledge.md"}'),i={name:"git-knowledge.md"};function r(d,e,l,h,b,n){return t(),a("div",null,e[0]||(e[0]=[c('<h3 id="查看配置信息" tabindex="-1">查看配置信息 <a class="header-anchor" href="#查看配置信息" aria-label="Permalink to &quot;查看配置信息&quot;">​</a></h3><blockquote><p><code>git config --list</code> 查看配置信息<br><code>git config user.name</code> 查看用户名<br><code>git config user.email</code> 查看邮箱</p></blockquote><h3 id="设置配置信息" tabindex="-1">设置配置信息 <a class="header-anchor" href="#设置配置信息" aria-label="Permalink to &quot;设置配置信息&quot;">​</a></h3><blockquote><p><code>git config --global user.name &#39;xxx&#39;</code> 设置用户名<br><code>git config --global user.email &#39;xxx@qq.com&#39;</code> 设置邮箱</p></blockquote><h3 id="初始化仓库" tabindex="-1">初始化仓库 <a class="header-anchor" href="#初始化仓库" aria-label="Permalink to &quot;初始化仓库&quot;">​</a></h3><blockquote><p><code>git init</code> 初始化仓库<br><code>git clone url</code> 克隆远程仓库到本地仓库</p></blockquote><h3 id="查看当前分支" tabindex="-1">查看当前分支 <a class="header-anchor" href="#查看当前分支" aria-label="Permalink to &quot;查看当前分支&quot;">​</a></h3><blockquote><p><code>git branch</code> 查看当前分支<br><code>git branch -a</code> 查看所有分支<br><code>git branch -r</code> 查看远程分支<br><code>git branch -v</code> 查看当前分支的最后一次提交<br><code>git branch --merged</code> 查看已经合并到当前分支的分支<br><code>git branch --no-merged</code> 查看尚未合并到当前分支的分支<br><code>git branch -d 分支名</code> 删除分支<br><code>git branch -D 分支名</code> 强制删除分支<br><code>git branch -m 旧分支名 新分支名</code> 重命名本地分支<br><code>git branch -m 新分支名</code> 重命名当前分支</p></blockquote><h3 id="查看差异" tabindex="-1">查看差异 <a class="header-anchor" href="#查看差异" aria-label="Permalink to &quot;查看差异&quot;">​</a></h3><blockquote><p><code>git diff</code> 查看工作区和暂存区的差异<br><code>git diff --cached</code> 查看暂存区与本地仓库的差异<br><code>git diff HEAD</code> 查看工作区和本地仓库的差异</p></blockquote><h3 id="查看提交历史" tabindex="-1">查看提交历史 <a class="header-anchor" href="#查看提交历史" aria-label="Permalink to &quot;查看提交历史&quot;">​</a></h3><blockquote><p><code>git log</code> 查看提交历史<br><code>git log --oneline</code> 以一行显示提交历史<br><code>git log -p 文件名</code> 查看指定文件的修改记录<br><code>git log -S &quot;关键字&quot;</code> 查找包含关键字的提交记录</p></blockquote><h3 id="撤销操作" tabindex="-1">撤销操作 <a class="header-anchor" href="#撤销操作" aria-label="Permalink to &quot;撤销操作&quot;">​</a></h3><blockquote><p><code>git reset --soft HEAD^</code> 撤销最近一次提交<br><code>git reset --mixed HEAD^</code> 撤销最近一次提交，保留工作区内容（默认）<br><code>git reset --hard HEAD^</code> 撤销最近一次提交，并清空工作区内容<br><code>git reset --hard hash(前六位)</code> 撤销到指定版本<br><code>git checkout -- filename</code> 放弃对文件的修改<br><code>git revert HEAD</code> 撤销最近一次提交但不改变历史记录</p></blockquote><h3 id="查看远程仓库信息" tabindex="-1">查看远程仓库信息 <a class="header-anchor" href="#查看远程仓库信息" aria-label="Permalink to &quot;查看远程仓库信息&quot;">​</a></h3><blockquote><p><code>git remote -v</code> 查看远程仓库信息<br><code>git remote add origin url</code> 添加远程仓库地址<br><code>git remote rm origin</code> 删除远程仓库地址<br><code>git remote show origin</code> 查看远程仓库的详细信息</p></blockquote><h3 id="合并分支" tabindex="-1">合并分支 <a class="header-anchor" href="#合并分支" aria-label="Permalink to &quot;合并分支&quot;">​</a></h3><blockquote><p><code>git merge 分支名</code> 合并指定分支到当前分支 <code>git merge 远程分支名</code> 合并远程分支到当前分支 <code>git merge origin/master</code> 合并远程分支到当前分支 <code>git merge --no-ff 分支名</code> 合并分支，并保留完整的提交历史记录<br><code>git merge --abort</code> 取消合并操作</p></blockquote><h3 id="查看状态" tabindex="-1">查看状态 <a class="header-anchor" href="#查看状态" aria-label="Permalink to &quot;查看状态&quot;">​</a></h3><blockquote><p><code>git status</code></p></blockquote><h3 id="添加管理-将文件或目录添加到本地仓库的暂存区" tabindex="-1">添加管理(将文件或目录添加到本地仓库的暂存区) <a class="header-anchor" href="#添加管理-将文件或目录添加到本地仓库的暂存区" aria-label="Permalink to &quot;添加管理(将文件或目录添加到本地仓库的暂存区)&quot;">​</a></h3><blockquote><p><code>git add filename</code> 将指定的文件添加到暂存区<br><code>git add path/</code> 将指定的目录添加到暂存区<br><code>git add .</code> 将当前目录下的所有文件添加到暂存区<br><code>git add --all</code> 将当前目录下的所有文件添加到暂存区</p></blockquote><h3 id="将文件移出暂存区" tabindex="-1">将文件移出暂存区 <a class="header-anchor" href="#将文件移出暂存区" aria-label="Permalink to &quot;将文件移出暂存区&quot;">​</a></h3><blockquote><p><code>git rm --cached filename</code></p></blockquote><h3 id="将暂存区的内容提交到本地仓库-yarn-lint-fix-处理-eslint-格式" tabindex="-1">将暂存区的内容提交到本地仓库 （yarn lint:fix 处理 eslint 格式） <a class="header-anchor" href="#将暂存区的内容提交到本地仓库-yarn-lint-fix-处理-eslint-格式" aria-label="Permalink to &quot;将暂存区的内容提交到本地仓库 （yarn lint:fix 处理 eslint 格式）&quot;">​</a></h3><blockquote><p><code>git commit -m &#39;xxx&#39;</code></p></blockquote><ul><li>build:用于修改项目构建系统，例如修改依赖库、外部接口或者升级 Node 版本等;</li><li>chore:用于对非业务性代码进行修改，例如修改构建流程或者工具配置等;</li><li>ci: 用于修改持续集成流程，例如修改 Travis、Jenkins 等工作流配置;</li><li>docs:用于修改文档，例如修改 README 文件、API 文档等;</li><li>style: 用于修改代码的样式，例如调整缩进、空格、空行等;</li><li>refactor:用于重构代码，例如修改代码结构、变量名、函数名等但不修改功能逻辑;</li><li>perf: 用于优化性能，例如提升代码的性能、减少内存占用等;</li><li>test: 用于修改测试用例，例如添加、删除、修改代码的测试用例等。</li></ul><h3 id="恢复文件" tabindex="-1">恢复文件 <a class="header-anchor" href="#恢复文件" aria-label="Permalink to &quot;恢复文件&quot;">​</a></h3><blockquote><p><code>git checkout -- filename</code></p></blockquote><h3 id="创建分支" tabindex="-1">创建分支 <a class="header-anchor" href="#创建分支" aria-label="Permalink to &quot;创建分支&quot;">​</a></h3><blockquote><p><code>git branch 分支名</code> 创建分支<br><code>git checkout -b 分支名</code> 创建并切换到分支</p></blockquote><h3 id="创建并切换到-xxx-分支" tabindex="-1">创建并切换到 XXX 分支 <a class="header-anchor" href="#创建并切换到-xxx-分支" aria-label="Permalink to &quot;创建并切换到 XXX 分支&quot;">​</a></h3><blockquote><p><code>git branch -M XXX</code></p></blockquote><h3 id="切换分支" tabindex="-1">切换分支 <a class="header-anchor" href="#切换分支" aria-label="Permalink to &quot;切换分支&quot;">​</a></h3><blockquote><p><code>git checkout 分支名</code></p></blockquote><h3 id="推送-拉取到远程分支" tabindex="-1">推送/拉取到远程分支 <a class="header-anchor" href="#推送-拉取到远程分支" aria-label="Permalink to &quot;推送/拉取到远程分支&quot;">​</a></h3><blockquote><p><code>git pull origin master</code> 拉取远程分支到本地<br><code>git push origin 分支名</code> 推送本地分支到远程 git pull 是两个指令的组合：git fetch 和 git merge</p></blockquote><h3 id="返回上游分支" tabindex="-1">返回上游分支 <a class="header-anchor" href="#返回上游分支" aria-label="Permalink to &quot;返回上游分支&quot;">​</a></h3><blockquote><p><code>git checkout -</code></p></blockquote><h3 id="代码冲突后-放弃或者退出流程-放弃-回到操作前的样子-就像什么都没发生过" tabindex="-1">代码冲突后，放弃或者退出流程; 放弃,回到操作前的样子，就像什么都没发生过 <a class="header-anchor" href="#代码冲突后-放弃或者退出流程-放弃-回到操作前的样子-就像什么都没发生过" aria-label="Permalink to &quot;代码冲突后，放弃或者退出流程; 放弃,回到操作前的样子，就像什么都没发生过&quot;">​</a></h3><blockquote><p><code>git cherry-pick --abort</code></p></blockquote><h3 id="退出-不回到操作前的样子-即保留已经-cherry-pick-成功的-commit-并退出-cherry-pick-流程" tabindex="-1">退出,不回到操作前的样子,即保留已经 cherry-pick 成功的 commit，并退出 cherry-pick 流程： <a class="header-anchor" href="#退出-不回到操作前的样子-即保留已经-cherry-pick-成功的-commit-并退出-cherry-pick-流程" aria-label="Permalink to &quot;退出,不回到操作前的样子,即保留已经 cherry-pick 成功的 commit，并退出 cherry-pick 流程：&quot;">​</a></h3><blockquote><p><code>git cherry-pick --quit</code></p></blockquote><h3 id="删除本地已合并的分支" tabindex="-1">删除本地已合并的分支： <a class="header-anchor" href="#删除本地已合并的分支" aria-label="Permalink to &quot;删除本地已合并的分支：&quot;">​</a></h3><blockquote><p><code>git branch -D [branchName]</code></p></blockquote><h3 id="删除远程分支" tabindex="-1">删除远程分支: <a class="header-anchor" href="#删除远程分支" aria-label="Permalink to &quot;删除远程分支:&quot;">​</a></h3><blockquote><p><code>git push origin --delete 分支名</code></p></blockquote><h3 id="添加远程仓库地址-并取名-origin" tabindex="-1">添加远程仓库地址 并取名 origin <a class="header-anchor" href="#添加远程仓库地址-并取名-origin" aria-label="Permalink to &quot;添加远程仓库地址 并取名 origin&quot;">​</a></h3><blockquote><p><code>git remote add origin url</code> 一般新建仓库就有，直接复制</p></blockquote><h3 id="将本地仓库推送到远程仓库" tabindex="-1">将本地仓库推送到远程仓库 <a class="header-anchor" href="#将本地仓库推送到远程仓库" aria-label="Permalink to &quot;将本地仓库推送到远程仓库&quot;">​</a></h3><blockquote><p><code>git push -u origin 分支名</code>一般新建仓库就有，直接复制 //git push -u origin master 主分支</p></blockquote><h4 id="如果返回-fatal-远程-origin-已经存在。-此时只需要将远程配置删除-重新添加即可" tabindex="-1">如果返回： fatal: 远程 origin 已经存在。 此时只需要将远程配置删除，重新添加即可； <a class="header-anchor" href="#如果返回-fatal-远程-origin-已经存在。-此时只需要将远程配置删除-重新添加即可" aria-label="Permalink to &quot;如果返回： fatal: 远程 origin 已经存在。 此时只需要将远程配置删除，重新添加即可；&quot;">​</a></h4><blockquote><p><code>git remote rm origin</code></p></blockquote><h3 id="git-stash-命令" tabindex="-1">git stash 命令 <a class="header-anchor" href="#git-stash-命令" aria-label="Permalink to &quot;git stash 命令&quot;">​</a></h3><blockquote><p><code>git stash</code> 保存当前未 commit 的代码，但不删除工作区改动。<br><code>git stash save &quot;备注的内容&quot;</code> 保存当前未 commit 的代码，并添加备注。<br><code>git stash list</code> 查看所有 stash 的记录。<br><code>git stash pop</code> 恢复最近一次的 stash，并删除该记录。<br><code>git stash apply</code> 恢复最近一次的 stash，但不删除该记录。<br><code>git stash drop</code> 删除最近一次的 stash。<br><code>git stash clear</code> 删除所有 stash 的记录。</p></blockquote><h3 id="查看所有-tag" tabindex="-1">查看所有 tag <a class="header-anchor" href="#查看所有-tag" aria-label="Permalink to &quot;查看所有 tag&quot;">​</a></h3><blockquote><p><code>git tag -l</code> 查看所有 tag。<br><code>git tag -l &quot;v1.0.*&quot;</code> 查看所有以 v1.0 开头的 tag。</p></blockquote><blockquote><p><code>git tag v1.0.0</code> 创建一个 tag。<br><code>git tag -a v1.0.0 -m &quot;版本 1.0.0&quot;</code> 创建一个带有注释的 tag。<br><code>git push origin v1.0.0</code> 提交 tag 到远程仓库。</p></blockquote><blockquote><p><code>git tag -d v1.0.0</code> 删除本地 tag<br><code>git push origin :refs/tags/v1.0.0</code> 删除远程 tag。<br><code>git show v1.0.0</code> 查看 tag 的详细信息。</p></blockquote>',59)]))}const s=o(i,[["render",r]]);export{g as __pageData,s as default};
